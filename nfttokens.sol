
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract SampleToken {
    
    struct Token {
        string name;
        uint speed;
        uint price;

    }

    Token[] tokensArr;
    mapping (uint => uint) tokenToOwner;

    function createtoken(string name, uint speed) public {
        for (uint8 i = 0; i<tokensArr.length; i++){
            require(tokensArr[i].name!=name,102);
        }
        tvm.accept();
        tokensArr.push(Token(name,speed,0));
        uint keyAsLastNum = tokensArr.length - 1;
        tokenToOwner[keyAsLastNum]=msg.pubkey(); 
    }

    function getTokenOwner(uint tokenId) public view returns (uint) {
        //tvm.accept();
        return tokenToOwner[tokenId];
    }

    function getTokenInfo(uint tokenId) public view returns (string tokenName, uint tokenSpeed, uint tokenPrice) {
        //tvm.accept();
        tokenName = tokensArr[tokenId].name;
        tokenSpeed = tokensArr[tokenId].speed;
        tokenPrice = tokensArr[tokenId].price;
    }

    function changeOwner(uint tokenId, uint pubKeyOfNewOwner) public {
        require(msg.pubkey()==tokenToOwner[tokenId], 101);
        tvm.accept(); 
        tokenToOwner[tokenId] = pubKeyOfNewOwner;
        
    }

    function changeSpeed(uint tokenId, uint speed) public {
        require(msg.pubkey()==tokenToOwner[tokenId], 101);
        tvm.accept(); 
        tokensArr[tokenId].speed = speed;
        
    }

    function tokenforsale(uint tokenId, uint price) public {
        require(msg.pubkey()==tokenToOwner[tokenId], 101);
        tvm.accept(); 
        tokensArr[tokenId].price = price;
        
    }
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        
    }

    
}
